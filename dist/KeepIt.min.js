angular.module("KeepIt",[]).provider("KeepIt",function(){function a(a,c){function d(a,b,c){if(!angular.isFunction(a[b]))throw"Cache Module should implement function '{0}({1})'".format(b,c.join(", "));if(a[b].length!=c.length)throw"Cache Module function '{0}' should expect {1} parameter(s) ({2})".format(b,c.length,c.join(", "));return!0}function e(a){if(angular.isUndefined(a.expireCheckMethod)||null==a.expireCheckMethod||angular.isUndefined(b.expiryCheckMethods[a.expireCheckMethod]))throw"expireCheckMethod must be set to a valid value of KeepItProvider.expiryCheckMethods";return!0}function f(a,b){var c=b.split("."),d=a[c[0]];if(c>1)for(var e=1;e<c.length;e++)d=d[c[e]];return d}var g;return g={cacheId:a,expireCheckMethod:b.defaultExpiryCheckMethod,registeredKeys:{},registeredToRefresh:{},type:c,put:function(a,c,d){var e={expireOn:null,value:c};if(angular.isDefined(d)){if(isNaN(d))throw"ttl must be a valid number. Specified value was : "+d;var f=b.unitTestNow||(new Date).getTime()/1e3;e.expireOn=f+d}return this.registeredKeys[a]=!0,this._put(a,e)},get:function(a){var c=this._get(a);return angular.isDefined(c)&&null!=c?this.expireCheckMethod==b.expiryCheckMethods.ON_THE_FLY&&b.invalidateCacheKey(this,a,c)?null:c:null},getValue:function(a){var b=this.get(a);return null!=b&&angular.isDefined(b.value)?b.value:null},syncToModel:function(a,b,c,d){angular.isUndefined(d)&&(d=!1),b.$watch(c,function(b){g.put(a,b)},d)},registerToRefresh:function(a,b,c){g.registeredToRefresh.push({key:a,scope:b,modelPath:c})},refresh:function(){angular.forEach(g.registeredToRefresh,function(a){g.put(a.key,f(a.scope,a.modelPath))})},getAllKeys:function(){return this.registeredKeys},remove:function(a){delete this.registeredKeys[a],this._remove(a)},destroy:function(){this.registeredKeys={},this._destroy()},validateInterface:function(){if(angular.isUndefined(this.cacheId))throw"You must set a cache id";return!!(d(this,"_get",["key"])&&d(this,"_put",["key","value"])&&d(this,"_remove",["key"])&&d(this,"_destroy",[]||!e(this)))}}}var b,c={};return b={expiryCheckMethods:{ON_THE_FLY:1,TIMED:2},timedExpiryCheckCycle:6e4,defaultExpiryCheckMethod:null,types:{MEMORY:1,PERSISTENT:2},registeredModules:{},registerModule:function(a,c){b.registeredModules[c]=a},invalidateCache:function(){angular.forEach(c,function(a){var c=a.getAllKeys();angular.forEach(c,function(c,d){b.invalidateCacheKey(a,d)})})},invalidateCacheKey:function(a,c,d){var e=b.unitTestNowCycleEnd||(new Date).getTime()/1e3;return angular.isUndefined(d)&&(d=a.get(c)),null!=d.expireOn&&e>=d.expireOn?(a.remove(c),!0):!1},$get:["$interval","$rootScope","$injector",function(d,e,f){var g;return g={expiryCheckMethods:b.expiryCheckMethods,types:b.types,getModule:function(d,e){if(angular.isUndefined(e)&&(e=g.types.MEMORY),angular.isUndefined(c[d])){var h=b.registeredModules[e];f.invoke([h,function(b){c[d]=new a(d,e),angular.extend(c[d],new b(d))}])}else if(c[d].type!==e)throw"The cache module your are trying to get already exists but is of a different type: "+c[d].type+" (asking for + "+g.types[e]+")";return c[d]},clearAll:function(){angular.forEach(c,function(a){a.destroy()}),c={}},invalidateCache:b.invalidateCache,invalidateCacheKey:b.invalidateCacheKey},function(){d(b.invalidateCache,b.timedExpiryCheckCycle)}(),g}]},null==b.defaultExpiryCheckMethod&&(b.defaultExpiryCheckMethod=b.expiryCheckMethods.ON_THE_FLY),b});