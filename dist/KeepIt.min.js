angular.module("KeepIt",[]).provider("KeepIt",function(){function a(a,b){function d(a,b,c){if(!angular.isFunction(a[b]))throw"Cache Module should implement function '{0}({1})'".format(b,c.join(", "));if(a[b].length!=c.length)throw"Cache Module function '{0}' should expect {1} parameter(s) ({2})".format(b,c.length,c.join(", "));return!0}function e(a){if(angular.isUndefined(a.expireCheckMethod)||null==a.expireCheckMethod||angular.isUndefined(c.expiryCheckMethods[a.expireCheckMethod]))throw"expireCheckMethod must be set to a valid value of KeepItProvider.expiryCheckMethods";return!0}function f(a,b){var c=b.split("."),d=a[c[0]];if(c>1)for(var e=1;e<c.length;e++)d=d[c[e]];return d}var g={cacheId:a,expireCheckMethod:c.defaultExpiryCheckMethod,registeredKeys:{},registeredToRefresh:{},type:b,isDestroyed:!1,init:function(){if(b===c.types.PERSISTENT){var a=this.get("_KeyStore"+this.cacheId);this.registeredKeys=null!==a?a.value:{}}},_putRaw:function(a,b){return this.registeredKeys[a]=!0,this._put(a,b)},put:function(a,b,d){var e={expireOn:null,value:b};if(angular.isDefined(d)){if(isNaN(d))throw"ttl must be a valid number. Specified value was : "+d;var f=c.unitTestNow||(new Date).getTime()/1e3;e.expireOn=f+d}return this.registeredKeys[a]=!0,this.type===c.types.PERSISTENT&&this._put("_KeyStore"+this.cacheId,this.registeredKeys),this._put(a,e)},get:function(a){var b=this._get(a);return angular.isDefined(b)&&null!=b?this.expireCheckMethod==c.expiryCheckMethods.ON_THE_FLY&&c.invalidateCacheKey(this,a,b)?null:b:null},getValue:function(a,b){var c=this.get(a);return null!=c&&angular.isDefined(c.value)?c.value:angular.isDefined(b)?b:null},syncToModel:function(a,b,c,d){angular.isUndefined(d)&&(d=!1),b.$watch(c,function(b){g.put(a,b)},d)},registerToRefresh:function(a,b,c){g.registeredToRefresh.push({key:a,scope:b,modelPath:c})},refresh:function(){angular.forEach(g.registeredToRefresh,function(a){g.put(a.key,f(a.scope,a.modelPath))})},getAllKeys:function(){return this.registeredKeys},remove:function(a){delete this.registeredKeys[a],this._remove(a)},destroy:function(){this.registeredKeys={},this._destroy(),this.isDestroyed=!0},validateInterface:function(){if(angular.isUndefined(this.cacheId))throw"You must set a cache id";return!!(d(this,"_get",["key"])&&d(this,"_put",["key","value"])&&d(this,"_remove",["key"])&&d(this,"_destroy",[]||!e(this)))}};return g}function b(b,d,e){var f=c.registeredModules[e],g=null;return b.invoke([f,function(b){g=new a(d,e),angular.extend(g,new b(d)),g.init()}]),g}var c,d,e={};return c={expiryCheckMethods:{ON_THE_FLY:1,TIMED:2},timedExpiryCheckCycle:6e4,defaultExpiryCheckMethod:null,types:{MEMORY:1,PERSISTENT:2,SESSION:3},registeredModules:{},registerModule:function(a,b){c.registeredModules[b]=a},invalidateCache:function(){angular.forEach(e,function(a){var b=a.getAllKeys();angular.forEach(b,function(b,d){c.invalidateCacheKey(a,d)})})},invalidateCacheKey:function(a,b,d){var e=c.unitTestNowCycleEnd||(new Date).getTime()/1e3;return angular.isUndefined(d)&&(d=a.get(b)),null!=d.expireOn&&e>=d.expireOn?(a.remove(b),!0):!1},$get:["$interval","$rootScope","$injector",function(a,f,g){return d={expiryCheckMethods:c.expiryCheckMethods,types:c.types,getModule:function(a,f){angular.isUndefined(f)&&(f=d.types.MEMORY);var h=!1;if(angular.forEach(c.registeredModules,function(a,b){b==f&&(h=!0)}),!h)throw"Trying to load a module type that is not implemented (did you forgot to include the required interface ?";if(angular.isUndefined(e[a])||e[a].isDestroyed)e[a]=b(g,a,f);else if(e[a].type!==f)throw"The cache module your are trying to get already exists but is of a different type: "+e[a].type+" (asking for + "+d.types[f]+")";return e[a]},convertType:function(a,c){var d=e[a],f=d.getAllKeys(),h=0,i=b(g,a,c);for(h=0;h<f.length;h++)i._putRaw(f[h],d.get(f[h]));return e[a]=i},destroyModule:function(a){angular.isString(a)&&(a=this.getModule(a)),a.destroy(),delete e[a.cacheId]},clearAll:function(){angular.forEach(e,function(a){a.destroy()}),e={}},invalidateCache:c.invalidateCache,invalidateCacheKey:c.invalidateCacheKey},function(){a(c.invalidateCache,c.timedExpiryCheckCycle)}(),d}]},null==c.defaultExpiryCheckMethod&&(c.defaultExpiryCheckMethod=c.expiryCheckMethods.ON_THE_FLY),c});